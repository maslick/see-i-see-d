############################################################
START/STOP OPENSHIFT CLUSTER
############################################################
oc cluster up --public-hostname=shift.maslick.ru --routing-suffix=shift.maslick.ru
oc login https://shift.maslick.ru:8443 -u developer -p dev
open https://shift.maslick.ru:8443/console
oc cluster down

############################################################
START/STOP MINISHIFT CLUSTER
############################################################
minishift start --memory=10240 --disk-size=40Gb
eval $(minishift oc-env)
oc login https://$(minishift ip):8443 -u developer -p dev
open https://$(minishift ip):8443/console
minishift stop

############################################################
CI/CD (JENKINS, NEXUS, SONARQUBE, GOGS)
############################################################
# 1. create projects
export DEV_PROJECT=dev
export STAGE_PROJECT=stage
export CICD_NAMESPACE=cicd

oc new-project ${DEV_PROJECT} --display-name="Development environment"
oc new-project ${STAGE_PROJECT} --display-name="Stage environment"
oc new-project ${CICD_NAMESPACE} --display-name="CI/CD pipeline"

# 2. Pre-pull docker images
minishift ssh docker pull openshiftdemos/gogs:0.11.34
minishift ssh docker pull openshiftdemos/sonarqube:7.0
minishift ssh docker pull sonatype/nexus3:3.13.0

# 3. Configure Jenkins
oc new-app jenkins-ephemeral -n ${CICD_NAMESPACE}
oc set resources dc/jenkins --limits=cpu=2,memory=2Gi --requests=cpu=100m,memory=512Mi
oc label dc jenkins app=jenkins --overwrite
oc create -f jenkins-slave.yaml -n ${CICD_NAMESPACE}

# 4. Grant Jenkins Access to Projects
oc policy add-role-to-user edit system:serviceaccount:${CICD_NAMESPACE}:jenkins -n ${DEV_PROJECT}
oc policy add-role-to-user edit system:serviceaccount:${CICD_NAMESPACE}:jenkins -n ${STAGE_PROJECT}

# 5. Configure Sonarqube
oc new-app -f https://raw.githubusercontent.com/tahonen/sonarqube/master/sonarqube-template.yml --param=SONARQUBE_MEMORY_LIMIT=6Gi
# login to Sonarqube (admin:admin) -> Administration -> Marketplace and install Code Analyzer for Java (SonarJava 5.6)

# 6. Configure Nexus
oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-template.yaml --param=NEXUS_VERSION=3.13.0 --param=MAX_MEMORY=2Gi
oc set resources dc/nexus --requests=cpu=200m,memory=1Gi --limits=cpu=2,memory=4Gi

# 7. Deploy Gogs
HOSTNAME=$(oc get route jenkins -o template --template='{{.spec.host}}' | sed "s/jenkins-${CICD_NAMESPACE}.//g")
GOGS_HOSTNAME="gogs-${CICD_NAMESPACE}.$HOSTNAME"
oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml \
    --param=GOGS_VERSION=0.11.34 \
    --param=HOSTNAME=$GOGS_HOSTNAME \
    --param=SKIP_TLS_VERIFY=true
# Register an admin user

############################################################
DUMMY JENKINS PIPELINE
############################################################
# 1. Import pipeline
oc create -f dummy-pipeline.yaml -n ${CICD_NAMESPACE}

# 2. Start dummy pipeline
oc start-build dummy-pipeline -n ${CICD_NAMESPACE}

############################################################
SEE-I-SEE-D JENKINS PIPELINE
############################################################
# 1. Import a builder image (JDK11)
oc import-image my-s2i-java --from docker.io/fabric8/s2i-java:latest-java11 --confirm -n ${DEV_PROJECT}

# 2. Configure Dev environment (create new build configuration, deployment, service)
oc new-build --name=vesna --image-stream=my-s2i-java:latest --binary=true -n ${DEV_PROJECT}
oc new-app vesna:latest --allow-missing-images -n ${DEV_PROJECT}
oc set triggers dc -l app=vesna --containers=vesna --from-image=vesna:latest --manual -n ${DEV_PROJECT}

oc expose dc/vesna --port=8080 -n ${DEV_PROJECT}
oc expose svc/vesna -n ${DEV_PROJECT}
oc set probe dc/vesna --readiness --get-url=http://:8080/ --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n ${DEV_PROJECT}
oc set probe dc/vesna --liveness  --get-url=http://:8080/ --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n ${DEV_PROJECT}
oc set env dc/vesna JAVA_OPTIONS=-Dserver.port=8080 -n ${DEV_PROJECT}
oc rollout cancel dc/vesna -n ${DEV_PROJECT}

# 3. Configure Stage environment (create new build configuration, deployment, service)
oc new-app vesna:stage --allow-missing-images -n ${STAGE_PROJECT}
oc set triggers dc -l app=vesna --containers=vesna --from-image=vesna:stage --manual -n ${STAGE_PROJECT}

oc expose dc/vesna --port=8080 -n ${STAGE_PROJECT}
oc expose svc/vesna -n ${STAGE_PROJECT}
oc set probe dc/vesna --readiness --get-url=http://:8080/ --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10 -n ${STAGE_PROJECT}
oc set probe dc/vesna --liveness  --get-url=http://:8080/ --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 -n ${STAGE_PROJECT}
oc set env dc/vesna JAVA_OPTIONS=-Dserver.port=8080 -n ${STAGE_PROJECT}
oc rollout cancel dc/vesna -n ${STAGE_PROJECT}

# 4. Import pipeline
oc new-app -f vesna-pipeline.yaml -n ${CICD_NAMESPACE}

############################################################
JDK11 Jenkins worker + OC client
############################################################
cd openshift
docker build -t maslick/jdk11-jenkins-slave-oc .
oc create -f jenkins-slave-jdk11.yaml -n ${CICD_NAMESPACE}