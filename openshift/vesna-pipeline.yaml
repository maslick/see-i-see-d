apiVersion: v1
kind: BuildConfig
metadata:
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
  creationTimestamp: null
  labels:
    app: vesna-pipeline
    name: vesna-pipeline
  name: vesna-pipeline
spec:
  triggers:
    - github:
        secret: secret102
      type: GitHub
    - generic:
        secret: secret102
      type: Generic
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
          agent {
            label 'jdk11'
          }

          environment {
            UZER='admin'
            PASS='admin123'
            REPO='http://nexus:8081/repository/maven-releases/'
            SNAP='http://nexus:8081/repository/maven-snapshots/'
            SONAR_USER_HOME='/tmp/.sonar'
          }

          stages {
            stage('Git checkout') {
              steps {
                git branch: 'jdk11', url: 'https://github.com/maslick/see-i-see-d.git'
              }
            }

            stage('Build') {
              steps {
                sh "./gradlew clean build -x test -Dsnapshot=true"
              }
            }

            stage('Test') {
              steps {
                sh "./gradlew test"
              }
            }

            stage('Code Analysis') {
              steps {
                sh "./gradlew sonarqube -Dsonar.host.url=http://sonarqube:9000 -Dsnapshot=true"
              }
            }

            stage('Nexus snapshots') {
              steps {
                sh "./gradlew publishToMavenLocal -Dsnapshot=true"
                sh "./gradlew build -x test publish -DnexusUser=$UZER -DnexusPassword=$PASS -DnexusRepo=$REPO -DnexusSnapshot=$SNAP -Dsnapshot=true"
              }
            }

            stage('Build Docker Image') {
              steps {
                sh "mkdir deployments"
                sh "find build/libs -name '*.jar' -and ! -name '*-javadoc.jar' -and ! -name '*-sources.jar' -exec cp {} deployments/ \\;"
                sh "ls -l deployments/"
                script {
                  openshift.withCluster() {
                    openshift.withProject("dev") {
                      openshift.selector("bc", "vesna").startBuild("--from-dir=deployments/", "--follow=true", "--wait=true")
                    }
                  }
                }
              }
            }

            stage('Deploy to DEV') {
              steps {
                sh "echo Deploying to dev"
                script {
                  openshift.withCluster() {
                    openshift.withProject("dev") {
                      openshift.selector("dc", "vesna").rollout().latest();
                    }
                  }
                }
              }
            }

            stage('Promote to STAGE?') {
              steps {
                timeout(time:5, unit:'MINUTES') {
                    input message: "Promote to STAGE?", ok: "Promote"
                }

                script {
                  openshift.withCluster() {
                    openshift.tag("dev/vesna:latest", "stage/vesna:stage")
                  }
                }
              }
            }

            stage('Deploy STAGE') {
              steps {
                sh "echo Deploying to STAGE"
                script {
                  openshift.withCluster() {
                    openshift.withProject("stage") {
                      openshift.selector("dc", "vesna").rollout().latest();
                    }
                  }
                }
              }
            }
          }
        }
    type: JenkinsPipeline
status:
  lastVersion: 0